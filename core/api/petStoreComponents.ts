/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { usePetStoreContext, PetStoreContext } from "./petStoreContext";
import type * as Fetcher from "./petStoreFetcher";
import { petStoreFetch } from "./petStoreFetcher";
import type * as Schemas from "./petStoreSchemas";
import type { ClientErrorStatus, ServerErrorStatus } from "./petStoreUtils";

export type ListPetsQueryParams = {
  /**
   * How many items to return at one time (max 100)
   *
   * @maximum 100
   * @format int32
   */
  limit?: number;
};

export type ListPetsError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
  payload: Schemas.Error;
}>;

export type ListPetsVariables = {
  queryParams?: ListPetsQueryParams;
} & PetStoreContext["fetcherOptions"];

export const fetchListPets = (
  variables: ListPetsVariables,
  signal?: AbortSignal
) =>
  petStoreFetch<
    Schemas.Pets,
    ListPetsError,
    undefined,
    {},
    ListPetsQueryParams,
    {}
  >({ url: "/pets", method: "get", ...variables, signal });

export const useListPets = <TData = Schemas.Pets>(
  variables: ListPetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Pets, ListPetsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    usePetStoreContext(options);
  return reactQuery.useQuery<Schemas.Pets, ListPetsError, TData>(
    queryKeyFn({ path: "/pets", operationId: "listPets", variables }),
    ({ signal }) => fetchListPets({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreatePetsError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 201>;
  payload: Schemas.Error;
}>;

export type CreatePetsVariables = PetStoreContext["fetcherOptions"];

export const fetchCreatePets = (
  variables: CreatePetsVariables,
  signal?: AbortSignal
) =>
  petStoreFetch<undefined, CreatePetsError, undefined, {}, {}, {}>({
    url: "/pets",
    method: "post",
    ...variables,
    signal,
  });

export const useCreatePets = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreatePetsError,
      CreatePetsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = usePetStoreContext();
  return reactQuery.useMutation<
    undefined,
    CreatePetsError,
    CreatePetsVariables
  >(
    (variables: CreatePetsVariables) =>
      fetchCreatePets({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ShowPetByIdPathParams = {
  /**
   * The id of the pet to retrieve
   */
  petId: string;
};

export type ShowPetByIdError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
  payload: Schemas.Error;
}>;

export type ShowPetByIdVariables = {
  pathParams: ShowPetByIdPathParams;
} & PetStoreContext["fetcherOptions"];

export const fetchShowPetById = (
  variables: ShowPetByIdVariables,
  signal?: AbortSignal
) =>
  petStoreFetch<
    Schemas.Pet,
    ShowPetByIdError,
    undefined,
    {},
    {},
    ShowPetByIdPathParams
  >({ url: "/pets/{petId}", method: "get", ...variables, signal });

export const useShowPetById = <TData = Schemas.Pet>(
  variables: ShowPetByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Pet, ShowPetByIdError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    usePetStoreContext(options);
  return reactQuery.useQuery<Schemas.Pet, ShowPetByIdError, TData>(
    queryKeyFn({
      path: "/pets/{petId}",
      operationId: "showPetById",
      variables,
    }),
    ({ signal }) =>
      fetchShowPetById({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/pets";
      operationId: "listPets";
      variables: ListPetsVariables;
    }
  | {
      path: "/pets/{petId}";
      operationId: "showPetById";
      variables: ShowPetByIdVariables;
    };
